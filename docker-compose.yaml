# Matt's DockerStack 
# ------------------
# A list of all the containers that I run. "Gotta catch 'em all!" :)
#
# *** Join me and others on the Dockerholics FB group https://www.facebook.com/groups/205764024543769
#
#
# Networking & Security
# -----------------------------------------------------------------------------------------------------------------
# 9443,980  - Nginx Proxy Manager         Reverse proxy app with LetsEncrypt included 
# As needed - VPN                         OpenVpn client - used for torrent-related activities
# As needed - VPNPrivoxy                  OpenVPN client - used for web proxy 'privoxy' for bypassing geo-block
# 5801      - filezilla                   FTP Client
# 80        - Nginx1                      Basic web server
# 80        - Nginx2                      Basic web server
# 8383      - LibreSpeed                  Server to device speed test utility
# 680, 6443 - Pi-Hole                     Ad blocker and DHCP
# -         - DuckDNS                     Dynamic DNS updater for DuckDNS
# 8118      - Privoxy                     Web proxy server, using VPNPrivoxy for accessing geo-blocked web sites
# 8089      - Btiwarden                   Passowrd management application 
#
# Media Playing or Provisioning 
# -----------------------------------------------------------------------------------------------------------------
# 32400     - Plex Media Server           Media server
# 8096      - JellyFin                    Media server
# 8056      - jfa-go                      JellyFin managent tool
# 8000      - DizQtv                      Simulateds HDHomeRun device, but reads from selected Plex content
# 2001      - MovieMatch                  Allows user matching of movies to watch (think Tinder for movies)
# 34400     - Xteve                       Allows multiple TV guides to be consolidated into one 
# 8083      - Calibre-web                 E-book browsing and viewing
#
# Photo Management
# -----------------------------------------------------------------------------------------------------------------
# 880       - Pwigo                       Self-hosted image manager
# 90        - Lychee                      Photo manager
# 8282      - Photoshow                   Photo manager
# 4343      - Chevereto                   Stock image manager
#
# Collaboration and Synchronisation
# -----------------------------------------------------------------------------------------------------------------
# 8384      - SyncThing                   Synchronisation of files between devices
# 9001      - TheLounge                   IRC Client
# 6875      - BookStack                   Shared documentation hub
# 7777      - HasteBin                    Private PasteBin clone
# 2525      - Privatebin                  Pastebin alternative
#
# Media Gathering
# -----------------------------------------------------------------------------------------------------------------
# 8989      - Sonarr                      Search for TV shows
# 7878      - Radarr                      Search for movies
# 7879      - Radarr4k                    Search for 4k movies
# 8686      - Lidarr                      Search for music
# 8787      - Readarr                     Search for e-books
# 5299      - LazyLibrarian               Search for e-books and audio books
# 8080      - Sabnzbd                     Usenet downloader
# 9991      - Qbittorrent                 Torrent downloader
# 9117      - Jackett                     Presents an API-callable interface over a number of torrent sites
# 5076      - NzbHydra2                   NZB and Jacket aggregator
# 6767      - Bazarr                      Downloads subtitles
# 3579      - OMBI                        End-user media requester
# 8265      - Tdarr                       Media conversion tool
# 5800      - Handbrake                   Media conversion tool
# 7080, 7081- Calibre                     E-book metadata manager
# 5055      - Overseer                    Media request tool
# 8484      - Gaps                        Plex missing media searcher
# 6789      - NzbGet                      Usenet downloader
# 8282      - Rutorrent                   Torrent download app
#
# Docker Related
# -----------------------------------------------------------------------------------------------------------------
# -         - Watchtower                  Update containers with latest images
# -         - Autoheal                    Restarts unhealthy containers
# 9000      - Portainer                   Docker management tool
# 9999      - Dozzle                      Container log aggregator
#
# System Monitoring & Management
# -----------------------------------------------------------------------------------------------------------------
# 19999     - Netdata                     Monitors and presents graphs for system attributes
# 88        - Monitorr                    Web page monitor
# 8082      - NextCloud                   Collaboration platform
# 8123      - HomeAssistant               Smart home monitoring and management
# 8181      - Tautulli                    Plex monitoring and statistics
# 8085      - Domoticz                    Smart home montioring and management
#
# Databases
# -----------------------------------------------------------------------------------------------------------------
# 3306      - MariaDB                     MariaDB Database(MySQL Clone)
# 3306      - MySQL                       MySQL Database
# 3001      - MySQLWorkBench              Client query tool for MySQL and MariaDB databases
#
# Programming
# -----------------------------------------------------------------------------------------------------------------
# 1880      - Node-Red                    Develop code for linking smart devices
#
# Link / Page Organisation
# -----------------------------------------------------------------------------------------------------------------
# 5443      - Organizr                    Link / Page manager
# 2000      - DashMachine                 Link manager
#
# Information 
# -----------------------------------------------------------------------------------------------------------------
# 8585      - FreshRSS                    RSS Feed
# 5555      - MagicMirror                 Magic mirror presentation software
#
# Gaming 
# -----------------------------------------------------------------------------------------------------------------
# 1234      - OpenRA                      Open Red Alert game server
#
version: '2.4'

# SERVICES ####################################################################################
services:

 # Password Manager
      - $PERSIST/bitwarden/data:/data
  #
  # privatebin - pastebin alternative
  #
  privatebin:
    container_name: privatebin
    restart: unless-stopped
    image: privatebin/nginx-fpm-alpine
    ports:
      - 2525:8080
    volumes:
      - $PERSIST/privatebin:/srv/data
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - PHP_TZ=$TIME_ZONE
      - PASSWORD=false

  #
  # piwigo - photo management application
  #
  piwigo:
    image: ghcr.io/linuxserver/piwigo
    container_name: piwigo
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/piwigo/config:/config
      - $MEDIA_PATH/pictures:/config/www/gallery/galleries
    ports:
      - 880:80
    restart: unless-stopped
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:80 || exit 1
      start_period: 120s
      timeout: 10s
      interval: 5s
      retries: 3

  piwigodb:
    container_name: piwigodb
    image: linuxserver/mariadb
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - MYSQL_ROOT_PASSWORD=piwigo
      - MYSQL_DATABASE=piwigo
      - MYSQL_USER=piwigo
      - MYSQL_PASSWORD=piwigo
    expose: 
      - 3306
    volumes:
      - $PERSIST/piwigodb:/var/lib/mysql
    restart: unless-stopped
    labels:
      - autoheal
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]

  nodered:
    image: nodered/node-red
    container_name: nodered
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/node-red:/data
    ports:
      - 1880:1880
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:1880 || exit 1
      start_period: 90s
      timeout: 10s
      interval: 5s
      retries: 3
    restart: unless-stopped

  #
  # moviematch - allows two or more people to select movies to watch on plex
  # - no health check available atm
  #
  moviematch:
    container_name: moviematch
    restart: unless-stopped
    image: lukechannings/moviematch
    ports:
      - 2001:8000
    environment:
      - PLEX_TOKEN=$PLEX_TOKEN__SECRET
      - PLEX_URL=$PURL
      - LIBRARY_FILTER=$LIBFILTER
#      - ROOT_PATH=/
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    depends_on:
      plex:
        condition: service_healthy

  #
  # magic mirror - drives display for magic mirror projects
  # - no health check available atm
  #      
  magicmirror:
    container_name: magicmirror
    image: bastilimbach/docker-magicmirror
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $PERSIST/magic_mirror/config:/opt/magic_mirror/config
      - $PERSIST/magic_mirror/modules:/opt/magic_mirror/modules
      - $PERSIST/magic_mirror/css/custom.css:/opt/magic_mirror/css/custom.css
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    ports:
      - 5555:5555

  syncthing: 
    container_name: syncthing
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - UMASK_SET=022
    volumes:
      - $PERSIST/syncthing/config:/config
      - $PERSIST/syncthing/data1:/data1
      - $PERSIST/syncthing/data2:/data2
    ports:
      - 8384:8384
      - 22000:22000
      - 21027:21027/udp
    image: linuxserver/syncthing
    restart: unless-stopped
 
  #
  # librespeed - internal speed test host to lan device
  # - no health check available atm
  #
  librespeed:
    image: linuxserver/librespeed
    container_name: librespeed
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - PASSWORD=PASSWORD
    volumes:
      - $PERSIST/librespeed:/config
    ports:
      - 8383:80
    restart: unless-stopped

  plex:
    container_name: plex
    hostname: $HOST_NAME
    restart: unless-stopped
    image: plexinc/pms-docker:plexpass
    volumes:
      - $PERSIST/plex/config:/config
      - $PERSIST/plex/transcode:/transcode
      - $MEDIA_PATH:/media
      - $MEDIA_PATH/audiobooks:/audiobooks:rw
    ports: 
      - "32400:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1901:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      - PLEX_UID=$PUID
      - PLEX_GID=$PGID
      - TZ=$TIME_ZONE
      - HOSTNAME=$HOST_NAME
      - PLEX_CLAIM=$PLEX_CLAIM_TOKEN__SECRET
      - ADVERTISE_IP=$ADVERTISE_IP
      - VERSION=$VERSION
      - ALLOWED_NETWORKS=$ALLOWED_NETWORKS
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fsS http://localhost:32400/identity > /dev/null || exit 1
      start_period: 60s
      timeout: 10s
      interval: 5s
      retries: 3
    devices:
      - /dev/dri:/dev/dri
    # cpu_percent: 50
    #mem_limit: 1500M
    #mem_reservation: 1300M

  homeassistant:
    container_name: homeassistant
    restart: always
    image: homeassistant/home-assistant
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
      - /dev/ttyUSB1:/dev/ttyUSB1
      - /dev/ttyACM0:/dev/ttyACM0
    volumes:
      - $PERSIST/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "8123:8123"
    privileged: true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE

  privoxy:
    image: vimagick/privoxy
    container_name: privoxy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    # Surfaced via vpnprivoxy
    # ports:
    #   - "8818:8118"
    volumes:
      - $PERSIST/privoxy/user.action:/etc/privoxy/user.action
      - $PERSIST/privoxy/user.filter:/etc/privoxy/user.filter
    network_mode: "service:vpnprivoxy"
    cap_add:
      - NET_ADMIN
    restart: always
    depends_on: 
      vpnprivoxy:
        condition: service_healthy

  vpnprivoxy:
    devices:
      - /dev/net/tun
    restart: unless-stopped
    container_name: vpnprivoxy
    ports:
      # privoxy
      - 8818:8118
    image: dperson/openvpn-client
    security_opt:
      - label:disable
    cap_add:
      - NET_ADMIN
    stdin_open: true
    tty: true
    dns:
      - 1.1.1.1
    volumes:
      - $PERSIST/vpnprivoxy:/vpn
    command: -f ""

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PERSIST/portainer-ce/data:/data
    environment:
      - TZ=$TIME_ZONE

  #
  # Watchtower - updates containers with latest images
  # - no health check available (if it fails, it just restarts by default)
  #
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
    # Environment section needs to be in this format for the notifications to work
    environment:
      TZ: $TIME_ZONE
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_POLL_INTERVAL: $WT_INTERVAL
      WATCHTOWER_TIMEOUT: 15
      WATCHTOWER_NOTIFICATIONS_LEVEL: info
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      # Using Pushbullet, telegram and pushover as examples, but just pick one
      # WATCHTOWER_NOTIFICATION_URL: "pushover://shoutrrr:$PUSHOVER_APP_API__SECRET@$PUSHOVER_USER_API__SECRET/?devices=$PUSHOVER_DEVICE telegram://$TELEGRAM_BOT_TOKEN__SECRET@telegram?channels=$TELEGRAM_CHAT_ID__SECRET pushbullet://$PUSHBULLET_API__SECRET"
      WATCHTOWER_NOTIFICATION_URL: "telegram://$TELEGRAM_BOT_TOKEN__SECRET@telegram?channels=$TELEGRAM_CHAT_ID__SECRET"
      # WATCHTOWER_NOTIFICATIONS: email
      # WATCHTOWER_NOTIFICATION_EMAIL_FROM: $GM_USER__SECRET
      # WATCHTOWER_NOTIFICATION_EMAIL_TO: $GM_TO__SECRET
      # WATCHTOWER_NOTIFICATION_EMAIL_SERVER: $GM_SERVER
      # WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: $GM_PORT
      # WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER: $GM_USER__SECRET
      # WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD: $GM_PSW__SECRET

    restart: always

  radarr:
    environment:
      - UMASK_SET=22
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/radarr/config:/config:rw
      - $MEDIA_PATH:/media:rw
      - $DOWNLOADS:/downloads:rw
    container_name: radarr
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: ${HEALTH_CHECK_OVERRIDE:-curl -fSs http://127.0.0.1:7878/api/system/status?apikey=}${RADARR_API_KEY__SECRET:- }|| exit 1
      start_period: 45s
      timeout: 10s
      interval: 5s
      retries: 3
    ports:
      - 7878:7878
    restart: unless-stopped
    entrypoint:
      - /init
    image: linuxserver/radarr:nightly

  nzbhydra:
    image: linuxserver/nzbhydra2
    container_name: nzbhydra
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE

    volumes:
      - $PERSIST/nzbhydra/config:/config
    ports:
      - 5076:5076
    # labels: 
    #   - autoheal=$AUTOHEAL_RESTART
    # healthcheck:
    #   test: curl -fSs 127.0.0.1:5076 || exit 1
    #   interval: 5s
    #   timeout: 10s
    #   start_period: 60s
    #   retries: 3
    restart: unless-stopped
    
  tautulli:
    environment:
      - HOME=/root
      - TERM=xterm
      - TAUTULLI_DOCKER=True
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/tautulli/config:/config:rw
      - $PERSIST/plex/config/Library/Application Support/Plex Media Server/Logs:/logs:ro
    container_name: tautulli
    ports:
      - 8181:8181
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -ILfSs http://localhost:8181/status > /dev/null || curl -ILfkSs https://localhost:8181/status > /dev/null
      start_period: 90s
      timeout: 10s
      interval: 5s
      retries: 3
    restart: 'unless-stopped'
    image: tautulli/tautulli
    depends_on:
      plex:
        condition: service_healthy

  sonarr:
    environment:
      - UMASK_SET=22
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/sonarr/config:/config:rw
      - $MEDIA_PATH/tv:/tv:rw
      - $MEDIA_PATH/anime:/anime:rw
      - $DOWNLOADS:/downloads:rw
    container_name: sonarr
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: ${HEALTH_CHECK_OVERRIDE:-curl -fSs http://127.0.0.1:8989/api/system/status?apikey=}${SONARR_API_KEY__SECRET:- }|| exit 1
      timeout: 10s
      interval: 5s
      retries: 3
    ports:
      - 8989:8989
    restart: 'unless-stopped'
    entrypoint:
      - /init
    image: linuxserver/sonarr:preview

  lazylibrarian:
    environment:
      - UMASK_SET=22
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - $PERSIST/lazylibrarian/config:/config:rw
      - $PERSIST/lazylibrarian/books:/books:rw
      - $PERSIST/lazylibrarian/comics:/comics:rw
      - $PERSIST/lazylibrarian/audiobooks:/audiobooks:rw
      - $DOWNLOADS:/downloads:rw
      - $PERSIST/lazylibrarian/magazines:/magazines:rw
    container_name: lazylibrarian
    ports:
      - 5299:5299
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:5299 || exit 1
      start_period: 240s
      timeout: 10s
      interval: 5s
      retries: 3
    restart: 'unless-stopped'
    image: linuxserver/lazylibrarian
    
  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/jellyfin/config:/config
      - $MEDIA_PATH:/media
    ports:
      - 8096:8096
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:8096 || exit 1
      start_period: 90s
      timeout: 10s
      interval: 5s
      retries: 3
    devices:
      #- /dev/dri/renderD128:/dev/dri/renderD128
      #- /dev/dri/card0:/dev/dri/card0
      - /dev/dri:/dev/dri
    restart: unless-stopped
    
  ombi:
    image: linuxserver/ombi
    container_name: ombi
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - BASE_URL=/ombi 
    volumes:
      - $PERSIST/ombi/config:/config
    ports:
      - 3579:3579
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs 127.0.0.1:3579 || exit 1
      start_period: 20s
      interval: 5s
      retries: 3
    restart: unless-stopped
    depends_on:
      plex:
        condition: service_healthy
      radarr:
        condition: service_healthy
      sonarr:
        condition: service_healthy
      lidarr:
        condition: service_healthy

  calibre-web:
    image: linuxserver/calibre-web
    container_name: calibre-web
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - $PERSIST/calibre-web/config:/config
      - $MEDIA_PATH/books:/books:rw
    ports:
      - 8083:8083
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:8083 || exit 1
      start_period: 500s
      timeout: 10s
      interval: 30s
      retries: 3
    depends_on: 
      calibre:
        condition: service_healthy

    restart: unless-stopped
    
  lidarr:
    image: linuxserver/lidarr:nightly
    container_name: lidarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - UMASK_SET=022 
    volumes:
      - $PERSIST/lidarr/config:/config
      - $MEDIA_PATH/music:/music
      - $DOWNLOADS:/downloads:rw
    ports:
      - 8686:8686
    restart: unless-stopped
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:8686 || exit 1
      start_period: 90s
      timeout: 20s
      interval: 20s
      retries: 3

  pihole:
    container_name: pihole
    image: pihole/pihole
    hostname: pihole
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
      - 1.1.1.1
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "80:80/tcp"
      - "6443:443/tcp"
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - WEBPASSWORD=$PH_PSW__SECRET
      - ServerIP=$PH_SVR_IP
      - DNS1=$PH_DNS_1
      - DNS2=$PH_DNS_2
      - TEMPERATUREUNIT=c
      - ADMIN_EMAIL=$GM_USER__SECRET
    volumes:
      - '$PERSIST/pihole/etc-pihole/:/etc/pihole'
      - '$PERSIST/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d'
    restart: unless-stopped
    
  calibre:
    image: linuxserver/calibre
    container_name: calibre
    environment:
      - USER_ID=$PUID
      - GROUP_ID=$PGID
      - KEEP_APP_RUNNING=1
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/calibre/config:/config
      - $MEDIA_PATH/books:/books:rw
      - $DOWNLOADS:/downloads:rw
    ports:
      - 7080:8080
      - 7081:8081
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:8081 || exit 1
      start_period: 30s
      timeout: 10s
      interval: 15s
      retries: 3
    restart: unless-stopped

  autoheal:
    container_name: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - TZ=$TIME_ZONE
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    image: willfarrell/autoheal

  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - SUBDOMAINS=$DUCKSUBDOMS__SECRET
      - TOKEN=$DUCKTOKEN__SECRET
      - LOG_FILE=true #optional
    volumes:
      - $PERSIST/duckdns:/config #optional - use if log_file true
    restart: unless-stopped

  bazarr:
    domainname: foo.com
    image: linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - UMASK_SET=022 #optional
    volumes:
      - $PERSIST/bazarr/config:/config
      - $MEDIA_PATH/movies:/movies
      - $MEDIA_PATH/tv:/tv
    ports:
      - 6767:6767
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: ${HEALTH_CHECK_OVERRIDE:-curl -fSs http://127.0.0.1:6767/api/systemstatus?apikey=}${BAZARR_API_KEY__SECRET:- }|| exit 1
      timeout: 5s
      interval: 10s
      retries: 3
    restart: unless-stopped
    mem_limit: 300M
    mem_reservation: 250M

  #
  # dizquetv
  # - no health check available at this time
  #
  dizquetv:
    container_name: dizquetv
    ports:
      - 8000:8000
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/dizquetv:/home/node/app/.dizquetv
    image: 'vexorian/dizquetv'
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    restart: unless-stopped
    depends_on:
      - xteve

  bookstack:
    image: linuxserver/bookstack
    container_name: bookstack
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - DB_HOST=bookstackdb
      - DB_USER=$BSUSER__SECRET
      - DB_PASS=$BSPSW__SECRET
      - DB_DATABASE=$BSDB
      - APP_URL=$BSBASEURL
      - APP_THEME=custom
      #- APP_DEBUG=true
      #- WKHTMLTOPDF=/usr/bin/wkhtmltopdf
    volumes:
      - $PERSIST/bookstack:/config
    ports:
      - 6875:80
    restart: unless-stopped
    depends_on:
      - bookstackdb

  bookstackdb:
    image: linuxserver/mariadb
    container_name: bookstackdb
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - MYSQL_ROOT_PASSWORD=$BSPSW__SECRET
      - MYSQL_DATABASE=$BSDB
      - MYSQL_USER=$BSUSER__SECRET
      - MYSQL_PASSWORD=$BSPSW__SECRET
    volumes:
      - $PERSIST/bookstackdb:/config
    labels:
      - autoheal
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]
    restart: unless-stopped

  xteve:
    container_name: xteve
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    ports:
      - 34400:34400
    volumes:
      - $PERSIST/xteve:/home/xteve/conf
      - $PERSIST/xteve/temp:/tmp/xteve
    image: 'dnsforge/xteve'
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:34400 || exit 1
      start_period: 180s
      timeout: 10s
      interval: 10s
      retries: 3
    restart: unless-stopped

  sabnzbd:
    image: linuxserver/sabnzbd:unstable
    container_name: sabnzbd
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs 127.0.0.1:8080 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - $PERSIST/sabnzbd/config:/config
      - $DOWNLOADS:/downloads:rw
      - $INCOMPLETE:/incomplete-downloads
    ports:
      - 8080:8080
      - 9090:9090
    restart: unless-stopped  

  readarr:
    container_name: readarr
    ports:
      - 8787:8787
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/readarr:/config
      - $MEDIA_PATH/books:/books:rw
      - $DOWNLOADS:/downloads:rw
    image: hotio/readarr:nightly    
    restart: unless-stopped
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: curl -fSs http://127.0.0.1:8787 || exit 1
      start_period: 90s
      timeout: 20s
      interval: 20s
      retries: 3
    
  hastebin:
    container_name: hastebin
    image: rlister/hastebin
    environment:
      STORAGE_TYPE: redis
      STORAGE_HOST: hastebinredis
    ports:
     - "7777:7777"
    depends_on:
      - hastebinredis
      
  hastebinredis:
    container_name: hastebinredis
    image: redis
    volumes:
      - $PERSIST/hastebinredis:/data
    entrypoint: redis-server --appendonly yes

  netdata:
    container_name: netdata
    image: netdata/netdata
    hostname: example.com # set to fqdn of host
    environment:
      - PGID=$NDROOTID
      - TZ=$TIME_ZONE
      - DOCKER_USR=root
    ports:
      - 19999:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  gaps:
    ports:
      - 8484:8484
    container_name: gaps
    expose:
      - '32400'
    volumes:
      - $PERSIST/gaps:/usr/data
    image: housewrecker/gaps
    restart: unless-stopped  
        
  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - UMASK_SET=022
      - WEBUI_PORT=9991
    volumes:
      - $PERSIST/qbittorrent:/config
      - $DOWNLOADS:/downloads
    depends_on:
      vpn:
        condition: service_healthy
    network_mode: "service:vpn"
#    ports:
#      - 6881:6881
#      - 6881:6881/udp
#      - 9991:9991
    restart: unless-stopped
        
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
      - AUTO_UPDATE=true #optional
      - RUN_OPTS=run options here #optional
    volumes:
      - $PERSIST/jackett:/config
      - $DOWNLOADS:/downloads
    depends_on:
      - vpn
    network_mode: "service:vpn"
#    ports:
#      - 9117:9117
    restart: unless-stopped   
    
  vpn:
    devices:
      - /dev/net/tun
    restart: unless-stopped
    container_name: vpn
    privileged: true
    ports:
      # jackett ports
      - 9117:9117
      # qbittorrent
      - 6881:6881
      #- 6881:6881/udp
      - 9991:9991
    dns:
      - 1.1.1.1
    image: dperson/openvpn-client
    security_opt:
      - label:disable
    cap_add:
      - NET_ADMIN
    stdin_open: true
    tty: true
    volumes:
      - $PERSIST/openvpn:/vpn
    command: -f ""

  proxymanager:
    container_name: proxy-manager
    image: jc21/nginx-proxy-manager
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TIME_ZONE
      DB_MYSQL_HOST: "proxymanagerdb"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
    ports:
      - 980:80
      - 981:81
      - 443:443
    volumes:
      - $PERSIST/proxymanager/data:/data
      - $PERSIST/proxymanager/letsencrypt:/etc/letsencrypt
    restart: always
    depends_on:
      proxymanagerdb:
        condition: service_healthy

  proxymanagerdb:
    container_name: proxymanagerdb
    image: 'jc21/mariadb-aria:10.4'
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - $PERSIST/proxymanagerdb/data/mysql:/var/lib/mysql
    restart: always
    labels:
      - autoheal
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]

  radarr4k:
    environment:
      - UMASK_SET=22
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TIME_ZONE
    volumes:
      - $PERSIST/radarr4k/config:/config:rw
      - $MEDIA_PATH:/media:rw
      - $DOWNLOADS:/downloads:rw
    container_name: radarr4k
    ports:
      - 7879:7878
    restart: unless-stopped
    entrypoint:
      - /init
    image: linuxserver/radarr:nightly
    labels: 
      - autoheal=$AUTOHEAL_RESTART
    healthcheck:
      test: ${HEALTH_CHECK_OVERRIDE:-curl -fSs http://127.0.0.1:7878/api/system/status?apikey=}${RADARR4K_API_KEY__SECRET:- }|| exit 1
      start_period: 45s
      timeout: 10s
      interval: 5s
      retries: 3

###########################################################
###### Not frequently in use but kept for examples    #####
###### Will soon move to a seperate archive yaml file #####
###########################################################
  # nzbget:
  #   image: ghcr.io/linuxserver/nzbget
  #   container_name: nzbget
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/nzbget/config:/config
  #     - $DOWNLOADS:/downloads
  #   ports:
  #     - 6789:6789
  #   restart: unless-stopped

  # handbrake:
  #   image: jlesage/handbrake
  #   container_name: handbrake
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   ports:
  #     - '5800:5800'
  #   volumes:
  #     - '$PERSIST/handbrake:/config:rw'
  #     - '~/:/storage:ro'
  #     - $PERSIST/handbrake/watch:/watch:rw
  #     - $PERSIST/handbrake/output:/output:rw
  #   devices:
  #     - /dev/dri:/dev/dri

  # nextclouddb:
  #   container_name: nextclouddb
  #   image: mariadb
  #   command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
  #   restart: always
  #   volumes:
  #     - $PERSIST/nextclouddb:/var/lib/mysql
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=xyzzy
  #     - MYSQL_PASSWORD=xyzzy
  #     - MYSQL_DATABASE=nextcloud
  #     - MYSQL_USER=nextcloud
  #   labels:
  #     - autoheal
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "--silent"]

  # nextcloud:
  #   container_name: nextcloud
  #   ports:
  #     - 8082:80
  #   links:
  #     - nextclouddb
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/nextcloud/html:/var/www/html
  #     - $PERSIST/nextcloud/custom_apps:/var/www/html/custom_apps
  #     - $PERSIST/nextcloud/config:/var/www/html/config
  #     - $PERSIST/nextcloud/data:/var/www/html/data
  #     - $PERSIST/nextcloud/themes:/var/www/html/themes/<YOUR_CUSTOM_THEME>
  #   image: nextcloud
  #   restart: always
  #   depends_on:
  #     nextclouddb:
  #       condition: service_healthy

  # dozzle:
  #   container_name: dozzle
  #   image: amir20/dozzle
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - 9999:8080
  #   restart: unless-stopped

  # openra:
  #   ports:
  #     - '1234:1234'
  #   environment:
  #     - Name=You Must Construct Additional Pylons
  #     - Password=xyzzy
  #     - Mod=ra
  #     - ListenPort=1234
  #   container_name: openra
  #   image: rmoriz/openra

  # #
  # # photoshow - basic image repository
  # # - no health check available atm
  # #
  # photoshow:
  #   image: linuxserver/photoshow
  #   container_name: photoshow
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/photoshow:/config
  #     - $PERSIST/photoshow/pictures:/Pictures:ro
  #     - $PERSIST/photoshow/thumbs:/Thumbs
  #   ports:
  #     - 8282:80
  #   restart: unless-stopped

  # #
  # # chevereto - digital image manager
  # # - no health check at this time
  # #
  # chevereto:
  #   image: linuxserver/chevereto
  #   container_name: chevereto
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/chevereto:/config
  #   ports:
  #     - 4343:80 
  #     - 4344:443 
  #   restart: unless-stopped

  # #
  # # cheveretodb - mariadb for chevereto appliacation
  # #
  # cheveretodb:
  #   image: linuxserver/mariadb
  #   container_name: cheveretodb
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #     - MYSQL_ROOT_PASSWORD=$CPSW__SECRET
  #     - MYSQL_DATABASE=$CDB
  #     - MYSQL_USER=$CUSER__SECRET
  #     - MYSQL_PASSWORD=$CPSW__SECRET
  #   volumes:
  #     - $PERSIST/cheveretodb:/config
  #   restart: unless-stopped 
  #   labels:
  #     - autoheal
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "--silent"]

  # #
  # # mysql workbench - guaccamole-based app for manipulating mysql/mariadb
  # # - no health check available at this time
  # #
  # mysql-workbench:
  #   image: linuxserver/mysql-workbench
  #   container_name: mysql-workbench
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/mysqlworkbench:/config
  #   ports:
  #     - 3001:3000
  #   cap_add:
  #     - IPC_LOCK
  #   restart: unless-stopped
    
  # thelounge:
  #   image: linuxserver/thelounge
  #   container_name: thelounge
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/thelounge:/config
  #   ports:
  #     - 9001:9000
  #   restart: unless-stopped

  # #
  # # freshrss - rss feed aggregator
  # # - no health check available atm
  # #
  # freshrss:
  #   image: linuxserver/freshrss
  #   container_name: freshrss
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/freshrss:/config
  #   ports:
  #     - 8585:80
  #   restart: unless-stopped

  # #
  # # Dashmachine -
  # # - no health check possible atm
  # #      
  # dashmachine:
  #   container_name: dashmachine
  #   restart: unless-stopped
  #   image: rmountjoy/dashmachine
  #   ports:
  #     - 2000:5000
  #   environment:
  #     - CONTEXT_PATH=/
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/dashmachine:/dashmachine/dashmachine/user_data

  # jfa-go:
  #   image: hrfee/jfa-go
  #   container_name: jfa-go
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/jfa-go:/data
  #     - $PERSIST/jellyfin/config:/jf
  #     - /etc/localtime:/etc/localtime:ro
  #   ports:
  #     - 8056:8056
  #   restart: unless-stopped

  # overseerr:
  #   container_name: overseerr
  #   restart: unless-stopped
  #   image: sctx/overseerr
  #   ports:
  #     - 5055:3000
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/overseerr:/app/config
  #   labels: 
  #     - autoheal=$AUTOHEAL_RESTART
  #   healthcheck:
  #     test: wget http://127.0.0.1:5055/api/v1/status -qO /dev/null || exit 1
  #     interval: 5s
  #     retries: 3

  # #
  # # filezilla
  # #
  # filezilla:
  #   image: jlesage/filezilla
  #   container_name: filezilla
  #   ports:
  #     - 5801:5800
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/filezilla:/config:rw
  #     - $MEDIA_PATH:/storage  
  #   restart: unless-stopped

  # # 
  # # Lychee - photo management solution
  # # - no health check identified atm
  # #
  # lychee:
  #   image: lycheeorg/lychee
  #   container_name: lychee
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #     - DB_CONNECTION=mysql
  #     - DB_HOST=lycheedb
  #     - DB_PORT=3306
  #     - DB_DATABASE=lychee
  #     - DB_USERNAME=lychee
  #     - DB_PASSWORD=lychee
  #     - STARTUP_DELAY=60
  #   volumes:
  #     - $PERSIST/lychee/conf:/conf
  #     - $PERSIST/lychee/uploads:/uploads
  #     - $PERSIST/lychee/sym:/sym
  #   ports:
  #     - 90:80
  #   restart: unless-stopped
  #   depends_on:
  #     lycheedb:
  #       condition: service_healthy

  # lycheedb:
  #   container_name: lychee_db
  #   image: mariadb:10
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #     - MYSQL_ROOT_PASSWORD=lychee
  #     - MYSQL_DATABASE=lychee
  #     - MYSQL_USER=lychee
  #     - MYSQL_PASSWORD=lychee
  #   expose: 
  #     - 3306
  #   volumes:
  #     - $PERSIST/lycheedb:/var/lib/mysql
  #   restart: unless-stopped
  #   labels:
  #     - autoheal
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "--silent"]

  # #
  # # monitorr - basic web site monitor
  # # - no health check available atm
  # #
  # monitorr:
  #   container_name: monitorr
  #   image: index.docker.io/monitorr/monitorr
  #   ports:
  #     - "88:80/tcp"
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/monitorr:/app
  #   restart: on-failure

  # tdarr:
  #   image: index.docker.io/haveagitgat/tdarr
  #   container_name: tdarr
  #   ports:
  #     -  8265:8265
  #   labels: 
  #     - autoheal=$AUTOHEAL_RESTART
  #   healthcheck:
  #     test: curl -fSs http://127.0.0.1:8265 || exit 1
  #     start_period: 120s
  #     timeout: 10s
  #     interval: 5s
  #     retries: 3
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/tdarr/data:/home/Tdarr/Documents/Tdarr
  #     - $PERSIST/tdarr/data/db:/var/lib/mongodb
  #     - $MEDIA_PATH:/home/Tdarr/media
  #     - $PERSIST/tdarr/transcodecache:/home/Tdarr/cache
  #     - /etc/localtime:/etc/localtime:ro
  #   devices:
  #     - "/dev/dri:/dev/dri"
  
  # #
  # # organizr - link and page manager
  # #
  # organizr:
  #   environment:
  #     - HOME=/root
  #     - TERM=xterm
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/organizr/config:/config:rw
  #   container_name: organizr
  #   ports:
  #     - 5443:443
  #     - 580:80
  #   restart: 'on-failure:0'
  #   entrypoint:
  #     - /init
  #   labels: 
  #     - autoheal=$AUTOHEAL_RESTART
  #   image: organizr/organizr
  ##
  ## Rutorrent - torrent d/l app
  ##
  # rutorrent:
  #   image: ghcr.io/linuxserver/rutorrent
  #   container_name: rutorrent
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TIME_ZONE
  #   volumes:
  #     - $PERSIST/rutorrent:/config
  #     - $DOWNLOADS:/downloads
  #   network_mode: "service:vpn"
  #   # ports:
  #   #   - 8282:80
  #   #   - 5005:5000
  #   #   - 51413:51413
  #   #   - 6881:6881/udp
  #   restart: unless-stopped
  #   depends_on:
  #     vpn:
  #        condition: service_healthy
         
  nginx1:
    environment:
      - PUID=1026
      - PGID=100
      - TZ=Australia/Brisbane
    ports:
      - '80:80'
    container_name: nginx1
    mac_address: 02:42:c0:a8:84:22
    networks: 
      macv_network:
        ipv4_address: 192.168.1.241
    volumes:
      - $PERSIST/nginx1/site-content:/usr/share/nginx/html
    image: nginx

  # nginx2:
  #   environment:
  #     - PUID=1026
  #     - PGID=100
  #     - TZ=Australia/Brisbane
  #   ports:
  #     - '80:80'
  #   container_name: nginx2
  #   mac_address: 02:42:c0:a8:84:23
  #   networks: 
  #     macv_network:
  #       ipv4_address: 192.168.1.242
  #   volumes:
  #     - $PERSIST/nginx2/site-content:/usr/share/nginx/html
  #   image: nginx

# VOLUMES ####################################################################################
#volumes:
#  nextclouddb: 
  
  # cifs: #use this if running docker on windows and needing to map a cifs network drive
  #   driver: local
  #   driver_opts:
  #     type: cifs
  #     o: username=(username),password=(password),rw,domain=(domainname),uid=1000,gid=1000
  #     device: "\\\\(ipaddress)\\shared"

 
# NETWORKS #################################################################################### 
networks:
  # # Cant use ip ranges yet. hopefully coming in a future release
  macv_network:
    driver: macvlan
    driver_opts:
      parent: $ETHCARD  
    ipam:
      driver: default
      config:
        - subnet: 192.168.1.0/24
          gateway: 192.168.1.1

